{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Content","Typography","Title","Layout","Footer","Dragger","Button","Group","Input","TextArea","Steps","Step","Text","Upload","props","name","multiple","action","onChange","info","status","file","console","log","fileList","message","success","error","App","handleOk","e","_this","axios","get","then","response","setState","months","data","visible","iconLoading","catch","finally","handleCancel","state","style","padding","marginTop","className","InboxOutlined","textAlign","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gYA2BQA,GADUC,IAAVC,MACoBC,IAApBH,SAASI,EAAWD,IAAXC,OAKTC,GAJYC,IAAOC,MACNC,IAAbC,SACSC,IAATC,KACSV,IAATW,KACYC,IAAZR,SAEFS,EAAQ,CACZC,KAAM,OACNC,UAAU,EACVC,OAAQ,sBACRC,SAJY,SAIHC,GAAO,IACNC,EAAWD,EAAKE,KAAhBD,OACO,cAAXA,GACFE,QAAQC,IAAIJ,EAAKE,KAAMF,EAAKK,UAEf,SAAXJ,EACFK,IAAQC,QAAR,UAAmBP,EAAKE,KAAKN,KAA7B,iCACoB,UAAXK,GACTK,IAAQE,MAAR,UAAiBR,EAAKE,KAAKN,KAA3B,2BAqESa,E,YA/Db,aAAe,IAAD,8BACZ,+CAUFC,SAAW,SAAAC,GACT,IAAMC,EAAK,eACXC,IACGC,IAAI,gCACJC,MAAK,SAASC,GACbJ,EAAMK,SAAS,CACbC,OAAQF,EAASG,KAAKA,KACtBC,SAAS,EACTC,aAAa,OAGhBC,OAAM,SAASd,GACdI,EAAMK,SAAS,CACbC,OAAQ,GACRE,SAAS,EACTC,aAAa,OAGhBE,SAAQ,gBA7BC,EAgCdC,aAAe,SAAAb,GACb,EAAKM,SAAS,CACZG,SAAS,EACTC,aAAa,KAjCf,EAAKI,MAAQ,CACXP,OAAQ,GACRG,aAAa,EACbD,SAAS,GALC,E,mHAyCZ,OACE,kBAAC,IAAD,KACE,kBAACvC,EAAD,CAAS6C,MAAO,CAAEC,QAAS,SAAUC,UAAW,KAC9C,kBAAC1C,EAAYS,EACX,uBAAGkC,UAAU,wBACX,kBAACC,EAAA,EAAD,OAEF,uBAAGD,UAAU,mBAAb,+CASJ,kBAAC5C,EAAD,CAAQyC,MAAO,CAAEK,UAAW,WAA5B,uB,GA1DUC,iBCvCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.a3b88923.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport {\n  Badge,\n  Calendar,\n  Divider,\n  Typography,\n  Layout,\n  Icon,\n  Button,\n  Modal,\n  Input,\n  Steps,\n  Alert,\n  Timeline,\n  List,\n  Table,\n  Tag,\n  Upload,\n  message\n} from \"antd\";\n\nimport axios from \"axios\";\nimport { findIndex } from \"lodash\";\nimport \"./App.css\";\nimport { InboxOutlined } from \"@ant-design/icons\";\n\nconst { Title } = Typography;\nconst { Content, Footer } = Layout;\nconst ButtonGroup = Button.Group;\nconst { TextArea } = Input;\nconst { Step } = Steps;\nconst { Text } = Typography;\nconst { Dragger } = Upload;\n\nconst props = {\n  name: \"file\",\n  multiple: true,\n  action: \"/wind-server/upload\",\n  onChange(info) {\n    const { status } = info.file;\n    if (status !== \"uploading\") {\n      console.log(info.file, info.fileList);\n    }\n    if (status === \"done\") {\n      message.success(`${info.file.name} file uploaded successfully.`);\n    } else if (status === \"error\") {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  }\n};\n\nclass App extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      months: [],\n      iconLoading: false,\n      visible: false\n    };\n  }\n\n  componentDidMount() {}\n\n  handleOk = e => {\n    const _this = this;\n    axios\n      .get(\"/urban-outfitters/gotoScrape\")\n      .then(function(response) {\n        _this.setState({\n          months: response.data.data,\n          visible: false,\n          iconLoading: true\n        });\n      })\n      .catch(function(error) {\n        _this.setState({\n          months: [],\n          visible: false,\n          iconLoading: false\n        });\n      })\n      .finally(function() {});\n  };\n\n  handleCancel = e => {\n    this.setState({\n      visible: false,\n      iconLoading: false\n    });\n  };\n\n  render() {\n    // const { months } = this.state;\n    return (\n      <Layout>\n        <Content style={{ padding: \"0 50px\", marginTop: 64 }}>\n          <Dragger {...props}>\n            <p className=\"ant-upload-drag-icon\">\n              <InboxOutlined />\n            </p>\n            <p className=\"ant-upload-text\">\n              Click or drag file to this area to upload\n            </p>\n            {/* <p className=\"ant-upload-hint\">\n              Support for a single or bulk upload. Strictly prohibit from\n              uploading company data or other band files\n            </p> */}\n          </Dragger>\n        </Content>\n        <Footer style={{ textAlign: \"center\" }}>PDF Comparison</Footer>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}